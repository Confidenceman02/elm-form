[{"name":"Form","comment":"\n\n\n## Example\n\nLet's look at a sign-up form example.\n\n\n### Step 1 - Define the Form\n\nWhat to look for:\n\n**The field declarations**\n\nBelow the `Form.form` call you will find all of the form's fields declared with\n\n    |> Form.field ...\n\nThese are the form's field declarations.\n\nThese fields each have individual validations. For example, `|> Field.required ...` means we'll get a validation\nerror if that field is empty (similar for checking the minimum password length).\n\nThere will be a corresponding parameter in the function we pass in to `Form.form` for every\nfield declaration (in this example, `\\email password passwordConfirmation -> ...`).\n\n**The `combine` validation**\n\nIn addition to the validation errors that individual fields can have independently (like\nrequired fields or minimum password length), we can also do _dependent validations_.\n\nWe use the [`Form.Validation`](Form-Validation) module to take each individual field and combine\nthem into a type and/or errors.\n\n**The `view`**\n\nTotally customizable. Uses [`Form.FieldView`](Form-FieldView) to render all of the fields declared.\n\n    import BackendTask exposing (BackendTask)\n    import ErrorPage exposing (ErrorPage)\n    import Form\n    import Form.Field as Field\n    import Form.FieldView as FieldView\n    import Form.Validation as Validation\n    import Html exposing (Html)\n    import Html.Attributes as Attr\n    import Route\n    import Server.Request as Request\n    import Server.Response exposing (Response)\n\n    type alias NewUser =\n        { email : String\n        , password : String\n        }\n\n    signupForm : Form.HtmlForm String NewUser () Msg\n    signupForm =\n        Form.form\n            (\\email password passwordConfirmation ->\n                { combine =\n                    Validation.succeed Login\n                        |> Validation.andMap email\n                        |> Validation.andMap\n                            (Validation.map2\n                                (\\pass confirmation ->\n                                    if pass == confirmation then\n                                        Validation.succeed pass\n\n                                    else\n                                        passwordConfirmation\n                                            |> Validation.fail\n                                                \"Must match password\"\n                                )\n                                password\n                                passwordConfirmation\n                                |> Validation.andThen identity\n                            )\n                , view =\n                    \\info ->\n                        [ Html.label []\n                            [ fieldView info \"Email\" email\n                            , fieldView info \"Password\" password\n                            , fieldView info \"Confirm Password\" passwordConfirmation\n                            ]\n                        , Html.button []\n                            [ if info.submitting then\n                                Html.text \"Signing Up...\"\n\n                              else\n                                Html.text \"Sign Up\"\n                            ]\n                        ]\n                }\n            )\n            |> Form.field \"email\"\n                (Field.text\n                    |> Field.required \"Required\"\n                )\n            |> Form.field \"password\"\n                passwordField\n            |> Form.field \"passwordConfirmation\"\n                passwordField\n\n    passwordField =\n        Field.text\n            |> Field.password\n            |> Field.required \"Required\"\n            |> Field.withClientValidation\n                (\\password ->\n                    ( Just password\n                    , if String.length password < 4 then\n                        [ \"Must be at least 4 characters\" ]\n\n                      else\n                        []\n                    )\n                )\n\n    fieldView :\n        Form.Context String input\n        -> String\n        -> Validation.Field String parsed FieldView.Input\n        -> Html msg\n    fieldView formState label field =\n        Html.div []\n            [ Html.label []\n                [ Html.text (label ++ \" \")\n                , field |> Form.FieldView.input []\n                ]\n            , (if formState.submitAttempted then\n                formState.errors\n                    |> Form.errorsForField field\n                    |> List.map\n                        (\\error ->\n                            Html.li [] [ Html.text error ]\n                        )\n\n               else\n                []\n              )\n                |> Html.ul [ Attr.style \"color\" \"red\" ]\n            ]\n\n\n### Step 2 - Render the Form's View\n\n    view maybeUrl sharedModel app =\n        { title = \"Sign Up\"\n        , body =\n            [ form\n                |> Form.renderHtml \"login\" [] Nothing app ()\n            ]\n        }\n\n\n### Step 3 - Handle Server-Side Form Submissions\n\n    action : RouteParams -> Request.Parser (BackendTask (Response ActionData ErrorPage))\n    action routeParams =\n        Request.formData [ signupForm ]\n            |> Request.map\n                (\\signupResult ->\n                    case signupResult of\n                        Ok newUser ->\n                            newUser\n                                |> myCreateUserBackendTask\n                                |> BackendTask.map\n                                    (\\() ->\n                                        -- redirect to the home page\n                                        -- after successful sign-up\n                                        Route.redirectTo Route.Index\n                                    )\n\n                        Err _ ->\n                            Route.redirectTo Route.Login\n                                |> BackendTask.succeed\n                )\n\n    myCreateUserBackendTask : BackendTask ()\n    myCreateUserBackendTask =\n        BackendTask.fail\n            \"TODO - make a database call to create a new user\"\n\n\n## Building a Form Parser\n\n@docs Form, HtmlForm, StyledHtmlForm, DoneForm\n\n@docs Response\n\n@docs form\n\n\n### Adding Fields\n\n@docs field\n\n\n## View Functions\n\n@docs Context\n\n\n## Showing Errors\n\n@docs Errors, errorsForField\n\n\n## Rendering Forms\n\n@docs renderHtml, renderStyledHtml\n\n\n## Running Parsers\n\n@docs parse, runServerSide\n\n\n## Submission\n\n@docs withOnSubmit\n\n\n## Progressively Enhanced Form Techniques (elm-pages)\n\n\n### Hidden Fields\n\nHidden fields are a useful technique when you are progressively enhancing form submissions and sending the key-value form data directly.\nIn `elm-pages` apps this is used often and is an idiomatic approach. If you are wiring up your own `onSubmit` with a Msg\nand never submit the forms directly, then you will likely include additional context as part of your `Msg` instead of\nthrough hidden fields.\n\n@docs hiddenField, hiddenKind\n\n\n### GET Forms\n\n@docs withGetMethod\n\n\n## Dynamic Fields\n\n@docs dynamic\n\n\n## Wiring\n\n`elm-form` manages the client-side state of fields, including FieldStatus which you can use to determine when\nin the user's workflow to show validation errors.\n\n@docs Msg, Model, init, update\n\n","unions":[{"name":"Errors","comment":" ","args":["error"],"cases":[]}],"aliases":[{"name":"Context","comment":" ","args":["error","input"],"type":"{ errors : Form.Errors error, submitting : Basics.Bool, submitAttempted : Basics.Bool, input : input }"},{"name":"DoneForm","comment":" ","args":["error","parsed","input","view","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error input -> view, initial : input -> List.List Form.Validation.InitialValue } parsed input msg"},{"name":"Form","comment":" ","args":["error","combineAndView","parsed","input","userMsg"],"type":"Internal.Form.Form error combineAndView parsed input userMsg"},{"name":"HtmlForm","comment":" ","args":["error","parsed","input","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error input -> List.List (Html.Html (Form.Msg msg)), initial : input -> List.List Form.Validation.InitialValue } parsed input msg"},{"name":"Model","comment":" ","args":[],"type":"Dict.Dict String.String Pages.FormState.FormState"},{"name":"Msg","comment":" ","args":["msg"],"type":"Internal.FieldEvent.Msg msg"},{"name":"Response","comment":" ","args":["error"],"type":"Pages.Internal.Form.Response error"},{"name":"StyledHtmlForm","comment":" ","args":["error","parsed","input","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error input -> List.List (Html.Styled.Html (Form.Msg msg)), initial : input -> List.List Form.Validation.InitialValue } parsed input msg"}],"values":[{"name":"dynamic","comment":" ","type":"(decider -> Form.Form error { combine : Form.Validation.Validation error parsed named initial1 constraints1, view : subView } parsed input msg) -> Form.Form error ({ combine : decider -> Form.Validation.Validation error parsed named initial1 constraints1, view : decider -> subView } -> combineAndView) parsed input msg -> Form.Form error combineAndView parsed input msg"},{"name":"errorsForField","comment":" ","type":"Form.Validation.Field error parsed initial kind -> Form.Errors error -> List.List error"},{"name":"field","comment":" Declare a visible field for the form.\n\nUse [`Form.Field`](Form-Field) to define the field and its validations.\n\n    form =\n        Form.form\n            (\\email ->\n                { combine =\n                    Validation.succeed NewUser\n                        |> Validation.andMap email\n                , view = \\info -> [{- render fields -}]\n                }\n            )\n            |> Form.field \"email\"\n                (Field.text |> Field.required \"Required\")\n\n","type":"String.String -> Form.Field.Field error parsed initial kind constraints -> Form.Form error (Form.Validation.Field error parsed initial kind -> combineAndView) parsedCombined input msg -> Form.Form error combineAndView parsedCombined input msg"},{"name":"form","comment":" ","type":"combineAndView -> Form.Form String.String combineAndView parsed input msg"},{"name":"hiddenField","comment":" Declare a hidden field for the form.\n\nUnlike [`field`](#field) declarations which are rendered using [`Form.FieldView`](Form-FieldView)\nfunctions, `hiddenField` inputs are automatically inserted into the form when you render it.\n\nYou define the field's validations the same way as for `field`, with the\n[`Form.Field`](Form-Field) API.\n\n    form =\n        Form.form\n            (\\quantity productId ->\n                { combine = {- combine fields -}\n                , view = \\info -> [{- render visible fields -}]\n                }\n            )\n            |> Form.field \"quantity\"\n                (Field.int |> Field.required \"Required\")\n            |> Form.field \"productId\"\n                (Field.text\n                    |> Field.required \"Required\"\n                    |> Field.withInitialValue (\\product -> Form.Value.string product.id)\n                )\n\n","type":"String.String -> Form.Field.Field error parsed initial kind constraints -> Form.Form error (Form.Validation.Field error parsed initial Form.FieldView.Hidden -> combineAndView) parsed input msg -> Form.Form error combineAndView parsed input msg"},{"name":"hiddenKind","comment":" ","type":"( String.String, String.String ) -> error -> Form.Form error combineAndView parsed input msg -> Form.Form error combineAndView parsed input msg"},{"name":"init","comment":" ","type":"Form.Model"},{"name":"parse","comment":" ","type":"String.String -> Form.AppContext -> input -> Form.Form error { info | combine : Form.Validation.Validation error parsed named initial constraints } parsed input msg -> ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) )"},{"name":"renderHtml","comment":" ","type":"String.String -> List.List (Html.Attribute (Form.Msg msg)) -> (actionData -> Maybe.Maybe (Form.Response error)) -> { submitting : Basics.Bool, state : Form.Model } -> input -> Form.Form error { combine : Form.Validation.Validation error parsed named initial constraints, view : Form.Context error input -> List.List (Html.Html (Form.Msg msg)), initial : input -> List.List Form.Validation.InitialValue } parsed input msg -> Html.Html (Form.Msg msg)"},{"name":"renderStyledHtml","comment":" ","type":"String.String -> List.List (Html.Styled.Attribute (Form.Msg msg)) -> (actionData -> Maybe.Maybe (Form.Response error)) -> { submitting : Basics.Bool, state : Form.Model } -> input -> Form.Form error { combine : Form.Validation.Validation error parsed field initial constraints, view : Form.Context error input -> List.List (Html.Styled.Html (Form.Msg msg)), initial : input -> List.List Form.Validation.InitialValue } parsed input msg -> Html.Styled.Html (Form.Msg msg)"},{"name":"runServerSide","comment":" ","type":"List.List ( String.String, String.String ) -> Form.Form error (Form.Validation.Validation error parsed kind initial constraints) Basics.Never input msg -> ( Basics.Bool, ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) ) )"},{"name":"update","comment":" ","type":"Form.Msg msg -> Form.Model -> ( Form.Model, Platform.Cmd.Cmd msg )"},{"name":"withGetMethod","comment":" ","type":"Form.Form error combineAndView parsed input userMsg -> Form.Form error combineAndView parsed input userMsg"},{"name":"withOnSubmit","comment":" ","type":"({ fields : List.List ( String.String, String.String ), parsed : Result.Result () parsed } -> userMsg) -> Form.Form error combineAndView parsed input oldMsg -> Form.Form error combineAndView parsed input userMsg"}],"binops":[]},{"name":"Form.Field","comment":"\n\n\n## Base Fields\n\n@docs text, checkbox, int, float\n\n\n## Multiple Choice Fields\n\n@docs select, OutsideRange\n\n\n## Date/Time Fields\n\n@docs date, time, TimeOfDay\n\n\n## Other\n\n@docs Field, FieldInfo, exactValue\n\n\n## Field Configuration\n\n@docs required, withClientValidation, map\n\n\n## Text Field Display Options\n\n@docs email, password, search, telephone, url, textarea\n\n\n## Numeric Field Options\n\n@docs withMinLength, withMaxLength\n\n\n## Phantom Options\n\n@docs No, Yes\n\n","unions":[{"name":"Field","comment":" ","args":["error","parsed","initial","kind","constraints"],"cases":[["Field",["Form.Field.FieldInfo error parsed initial","kind"]]]},{"name":"No","comment":" ","args":[],"cases":[]},{"name":"OutsideRange","comment":" ","args":[],"cases":[["AboveRange",[]],["BelowRange",[]]]},{"name":"Yes","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"FieldInfo","comment":" ","args":["error","parsed","initial"],"type":"{ decode : Maybe.Maybe String.String -> ( Maybe.Maybe parsed, List.List error ), properties : List.List ( String.String, Json.Encode.Value ), initialToString : initial -> String.String }"},{"name":"TimeOfDay","comment":" ","args":[],"type":"{ hours : Basics.Int, minutes : Basics.Int }"}],"values":[{"name":"checkbox","comment":" ","type":"Form.Field.Field error Basics.Bool Basics.Bool Form.FieldView.Input { required : () }"},{"name":"date","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Date.Date) Date.Date Form.FieldView.Input { min : Date.Date, max : Date.Date, required : (), wasMapped : Form.Field.No }"},{"name":"email","comment":" ","type":"Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"exactValue","comment":" ","type":"String.String -> error -> Form.Field.Field error String.String Basics.Never Form.FieldView.Input { required : (), plainText : (), wasMapped : Form.Field.No }"},{"name":"float","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Basics.Float) Basics.Float Form.FieldView.Input { min : Basics.Float, max : Basics.Float, required : (), wasMapped : Form.Field.No }"},{"name":"int","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Basics.Int) Basics.Int Form.FieldView.Input { min : Basics.Int, max : Basics.Int, required : (), wasMapped : Form.Field.No, step : Basics.Int }"},{"name":"map","comment":" ","type":"(parsed -> mapped) -> Form.Field.Field error parsed initial kind constraints -> Form.Field.Field error mapped initial kind { constraints | wasMapped : Form.Field.Yes }"},{"name":"password","comment":" ","type":"Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"required","comment":" ","type":"error -> Form.Field.Field error (Maybe.Maybe parsed) kind initial { constraints | required : (), wasMapped : Form.Field.No } -> Form.Field.Field error parsed kind initial { constraints | wasMapped : Form.Field.No }"},{"name":"search","comment":" ","type":"Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"select","comment":" ","type":"List.List ( String.String, option ) -> (String.String -> error) -> Form.Field.Field error (Maybe.Maybe option) option (Internal.Input.Options option) { required : (), wasMapped : Form.Field.No }"},{"name":"telephone","comment":" ","type":"Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"text","comment":" ","type":"Form.Field.Field error (Maybe.Maybe String.String) String.String Form.FieldView.Input { required : (), plainText : (), wasMapped : Form.Field.No, minlength : (), maxlength : () }"},{"name":"textarea","comment":" ","type":"{ rows : Maybe.Maybe Basics.Int, cols : Maybe.Maybe Basics.Int } -> Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"time","comment":" <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time>\n","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Form.Field.TimeOfDay) Form.Field.TimeOfDay Form.FieldView.Input { required : (), wasMapped : Form.Field.No }"},{"name":"url","comment":" ","type":"Form.Field.Field error parsed initial Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed initial Form.FieldView.Input constraints"},{"name":"withClientValidation","comment":" ","type":"(parsed -> ( Maybe.Maybe mapped, List.List error )) -> Form.Field.Field error parsed initial kind constraints -> Form.Field.Field error mapped initial kind { constraints | wasMapped : Form.Field.Yes }"},{"name":"withMaxLength","comment":" ","type":"Basics.Int -> error -> Form.Field.Field error parsed initial kind { constraints | maxlength : () } -> Form.Field.Field error parsed initial kind constraints"},{"name":"withMinLength","comment":" ","type":"Basics.Int -> error -> Form.Field.Field error parsed initial kind { constraints | minlength : () } -> Form.Field.Field error parsed initial kind constraints"}],"binops":[]},{"name":"Form.FieldStatus","comment":"\n\n@docs FieldStatus, fieldStatusToString\n\n","unions":[{"name":"FieldStatus","comment":" ","args":[],"cases":[["NotVisited",[]],["Focused",[]],["Changed",[]],["Blurred",[]]]}],"aliases":[],"values":[{"name":"fieldStatusToString","comment":" ","type":"Form.FieldStatus.FieldStatus -> String.String"}],"binops":[]},{"name":"Form.FieldView","comment":"\n\n@docs Input, Options, input, radio, Hidden, select, valueButton\n\n\n## Html.Styled Helpers\n\n@docs radioStyled, inputStyled, valueButtonStyled\n\n","unions":[],"aliases":[{"name":"Hidden","comment":" There are no render helpers for hidden fields because the `Form.renderHtml` helper functions automatically render hidden fields for you.\n","args":[],"type":"Internal.Input.Hidden"},{"name":"Input","comment":" ","args":[],"type":"Internal.Input.Input"},{"name":"Options","comment":" ","args":["a"],"type":"Internal.Input.Options a"}],"values":[{"name":"input","comment":" ","type":"List.List (Html.Attribute msg) -> Form.Validation.Field error parsed initial Form.FieldView.Input -> Html.Html msg"},{"name":"inputStyled","comment":" ","type":"List.List (Html.Styled.Attribute msg) -> Form.Validation.Field error parsed initial Form.FieldView.Input -> Html.Styled.Html msg"},{"name":"radio","comment":" ","type":"List.List (Html.Attribute msg) -> (parsed -> (List.List (Html.Attribute msg) -> Html.Html msg) -> Html.Html msg) -> Form.Validation.Field error parsed2 initial (Form.FieldView.Options parsed) -> Html.Html msg"},{"name":"radioStyled","comment":" ","type":"List.List (Html.Styled.Attribute msg) -> (parsed -> (List.List (Html.Styled.Attribute msg) -> Html.Styled.Html msg) -> Html.Styled.Html msg) -> Form.Validation.Field error parsed2 initial (Form.FieldView.Options parsed) -> Html.Styled.Html msg"},{"name":"select","comment":" ","type":"List.List (Html.Attribute msg) -> (parsed -> ( List.List (Html.Attribute msg), String.String )) -> Form.Validation.Field error parsed2 initial (Form.FieldView.Options parsed) -> Html.Html msg"},{"name":"valueButton","comment":" Gives you a submit button that will submit the form with a specific value for the given Field.\n","type":"String.String -> List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Form.Validation.Field error parsed initial kind -> Html.Html msg"},{"name":"valueButtonStyled","comment":" Gives you a submit button that will submit the form with a specific value for the given Field.\n","type":"String.String -> List.List (Html.Styled.Attribute msg) -> List.List (Html.Styled.Html msg) -> Form.Validation.Field error parsed initial kind -> Html.Styled.Html msg"}],"binops":[]},{"name":"Form.Handler","comment":"\n\n@docs Handler\n\n@docs init, with\n\n@docs run\n\n","unions":[{"name":"Handler","comment":" ","args":["error","parsed"],"cases":[]}],"aliases":[],"values":[{"name":"init","comment":" ","type":"(parsed -> combined) -> Internal.Form.Form error { combineAndView | combine : Form.Validation.Validation error parsed kind initial constraints } parsed input msg -> Form.Handler.Handler error combined"},{"name":"run","comment":" ","type":"List.List ( String.String, String.String ) -> Form.Handler.Handler error parsed -> ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) )"},{"name":"with","comment":" ","type":"(parsed -> combined) -> Internal.Form.Form error { combineAndView | combine : Form.Validation.Validation error parsed kind initial constraints } parsed input msg -> Form.Handler.Handler error combined -> Form.Handler.Handler error combined"}],"binops":[]},{"name":"Form.Validation","comment":"\n\n\n## Validations\n\n@docs Combined, Field, Validation\n\n@docs andMap, andThen, fail, fromMaybe, fromResult, map, map2, parseWithError, succeed, withError, withErrorIf, withFallback\n\n\n## Field Metadata\n\n@docs value, fieldName, fieldStatus\n\n@docs statusAtLeast\n\n\n## Setting Initial Values\n\n@docs withInitial, InitialValue\n\n\n## Mapping\n\n@docs map3, map4, map5, map6, map7, map8, map9\n\n@docs mapToCombined\n\n\n## Global Validation\n\n@docs global\n\n","unions":[],"aliases":[{"name":"Combined","comment":" ","args":["error","parsed"],"type":"Form.Validation.Validation error parsed Basics.Never Basics.Never Basics.Never"},{"name":"Field","comment":" ","args":["error","parsed","initial","kind"],"type":"Form.Validation.Validation error parsed kind initial { field : kind }"},{"name":"InitialValue","comment":" ","args":[],"type":"Internal.InitialValue.InitialValue"},{"name":"Validation","comment":" ","args":["error","parsed","kind","initial","constraints"],"type":"Pages.Internal.Form.Validation error parsed kind initial constraints"}],"values":[{"name":"andMap","comment":" ","type":"Form.Validation.Validation error a named1 initial1 constraints1 -> Form.Validation.Validation error (a -> b) named2 initial2 constraints2 -> Form.Validation.Combined error b"},{"name":"andThen","comment":" ","type":"(parsed -> Form.Validation.Validation error mapped named1 initial1 constraints1) -> Form.Validation.Validation error parsed named2 initial2 constraints2 -> Form.Validation.Combined error mapped"},{"name":"fail","comment":" ","type":"error -> Form.Validation.Field error parsed1 initial field -> Form.Validation.Combined error parsed"},{"name":"fieldName","comment":" ","type":"Form.Validation.Field error parsed initial kind -> String.String"},{"name":"fieldStatus","comment":" ","type":"Form.Validation.Field error parsed initial kind -> Form.FieldStatus.FieldStatus"},{"name":"fromMaybe","comment":" ","type":"Maybe.Maybe parsed -> Form.Validation.Combined error parsed"},{"name":"fromResult","comment":" ","type":"Form.Validation.Field error (Result.Result error parsed) initial kind -> Form.Validation.Combined error parsed"},{"name":"global","comment":" ","type":"Form.Validation.Field error () Basics.Never Basics.Never"},{"name":"map","comment":" ","type":"(parsed -> mapped) -> Form.Validation.Validation error parsed named initial constraint -> Form.Validation.Validation error mapped named initial constraint"},{"name":"map2","comment":" ","type":"(a -> b -> c) -> Form.Validation.Validation error a named1 initial1 constraints1 -> Form.Validation.Validation error b named2 initial2 constraints2 -> Form.Validation.Combined error c"},{"name":"map3","comment":" ","type":"(a1 -> a2 -> a3 -> a4) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Combined error a4"},{"name":"map4","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Combined error a5"},{"name":"map5","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5 -> a6) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Validation error a5 named5 initial5 constraints5 -> Form.Validation.Combined error a6"},{"name":"map6","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Validation error a5 named5 initial5 constraints5 -> Form.Validation.Validation error a6 named6 initial6 constraints6 -> Form.Validation.Combined error a7"},{"name":"map7","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Validation error a5 named5 initial5 constraints5 -> Form.Validation.Validation error a6 named6 initial6 constraints6 -> Form.Validation.Validation error a7 named7 initial7 constraints7 -> Form.Validation.Combined error a8"},{"name":"map8","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Validation error a5 named5 initial5 constraints5 -> Form.Validation.Validation error a6 named6 initial6 constraints6 -> Form.Validation.Validation error a7 named7 initial7 constraints7 -> Form.Validation.Validation error a8 named8 initial8 constraints8 -> Form.Validation.Combined error a9"},{"name":"map9","comment":" ","type":"(a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9 -> a10) -> Form.Validation.Validation error a1 named1 initial1 constraints1 -> Form.Validation.Validation error a2 named2 initial2 constraints2 -> Form.Validation.Validation error a3 named3 initial3 constraints3 -> Form.Validation.Validation error a4 named4 initial4 constraints4 -> Form.Validation.Validation error a5 named5 initial5 constraints5 -> Form.Validation.Validation error a6 named6 initial6 constraints6 -> Form.Validation.Validation error a7 named7 initial7 constraints7 -> Form.Validation.Validation error a8 named8 initial8 constraints8 -> Form.Validation.Validation error a9 named9 initial9 constraints9 -> Form.Validation.Combined error a10"},{"name":"mapToCombined","comment":" ","type":"(parsed -> mapped) -> Form.Validation.Validation error parsed named initial constraint -> Form.Validation.Combined error mapped"},{"name":"parseWithError","comment":" ","type":"parsed -> ( String.String, error ) -> Form.Validation.Combined error parsed"},{"name":"statusAtLeast","comment":" ","type":"Form.FieldStatus.FieldStatus -> Form.Validation.Field error parsed initial kind -> Basics.Bool"},{"name":"succeed","comment":" ","type":"parsed -> Form.Validation.Combined error parsed"},{"name":"value","comment":" ","type":"Form.Validation.Validation error parsed named initial constraint -> Maybe.Maybe parsed"},{"name":"withError","comment":" ","type":"Form.Validation.Field error parsed1 initial field -> error -> Form.Validation.Validation error parsed2 named Basics.Never constraints -> Form.Validation.Validation error parsed2 named Basics.Never constraints"},{"name":"withErrorIf","comment":" ","type":"Basics.Bool -> Form.Validation.Field error ignored initial field -> error -> Form.Validation.Validation error parsed named Basics.Never constraints -> Form.Validation.Validation error parsed named Basics.Never constraints"},{"name":"withFallback","comment":" ","type":"parsed -> Form.Validation.Validation error parsed named initial constraints -> Form.Validation.Validation error parsed named initial constraints"},{"name":"withInitial","comment":" ","type":"initial -> Form.Validation.Field error parsed initial kind -> Form.Validation.InitialValue"}],"binops":[]}]