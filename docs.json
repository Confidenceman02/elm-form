[{"name":"Form","comment":" One of the core features of elm-pages is helping you manage form data end-to-end, including\n\n  - Presenting the HTML form with its fields\n  - Maintaining client-side form state\n  - Showing validation errors on the client-side\n  - Receiving a form submission on the server-side\n  - Using the exact same client-side validations on the server-side\n  - Letting you run server-only Validations with BackendTask's (things like checking for a unique username)\n\nBecause elm-pages is a framework, it has its own internal Model and Msg's. That means you, the user,\ncan offload some of the responsibility to elm-pages and build an interactive form with real-time\nclient-side state and validation errors without wiring up your own Model and Msg's to manage that\nstate. You define the source of truth for your form (how to parse it into data or errors), and\nelm-pages manages the state.\n\nLet's look at a sign-up form example.\n\n\n### Step 1 - Define the Form\n\nWhat to look for:\n\n**The field declarations**\n\nBelow the `Form.init` call you will find all of the form's fields declared with\n\n    |> Form.field ...\n\nThese are the form's field declarations.\n\nThese fields each have individual validations. For example, `|> Field.required ...` means we'll get a validation\nerror if that field is empty (similar for checking the minimum password length).\n\nThere will be a corresponding parameter in the function we pass in to `Form.init` for every\nfield declaration (in this example, `\\email password passwordConfirmation -> ...`).\n\n**The `combine` validation**\n\nIn addition to the validation errors that individual fields can have independently (like\nrequired fields or minimum password length), we can also do _dependent validations_.\n\nWe use the [`Form.Validation`](Form-Validation) module to take each individual field and combine\nthem into a type and/or errors.\n\n**The `view`**\n\nTotally customizable. Uses [`Form.FieldView`](Form-FieldView) to render all of the fields declared.\n\n    import BackendTask exposing (BackendTask)\n    import ErrorPage exposing (ErrorPage)\n    import Form\n    import Form.Field as Field\n    import Form.FieldView as FieldView\n    import Form.Validation as Validation\n    import Html exposing (Html)\n    import Html.Attributes as Attr\n    import Route\n    import Server.Request as Request\n    import Server.Response exposing (Response)\n\n    type alias NewUser =\n        { email : String\n        , password : String\n        }\n\n    signupForm : Form.HtmlForm String NewUser () Msg\n    signupForm =\n        Form.init\n            (\\email password passwordConfirmation ->\n                { combine =\n                    Validation.succeed Login\n                        |> Validation.andMap email\n                        |> Validation.andMap\n                            (Validation.map2\n                                (\\pass confirmation ->\n                                    if pass == confirmation then\n                                        Validation.succeed pass\n\n                                    else\n                                        passwordConfirmation\n                                            |> Validation.fail\n                                                \"Must match password\"\n                                )\n                                password\n                                passwordConfirmation\n                                |> Validation.andThen identity\n                            )\n                , view =\n                    \\info ->\n                        [ Html.label []\n                            [ fieldView info \"Email\" email\n                            , fieldView info \"Password\" password\n                            , fieldView info \"Confirm Password\" passwordConfirmation\n                            ]\n                        , Html.button []\n                            [ if info.isTransitioning then\n                                Html.text \"Signing Up...\"\n\n                              else\n                                Html.text \"Sign Up\"\n                            ]\n                        ]\n                }\n            )\n            |> Form.field \"email\"\n                (Field.text\n                    |> Field.required \"Required\"\n                )\n            |> Form.field \"password\"\n                passwordField\n            |> Form.field \"passwordConfirmation\"\n                passwordField\n\n    passwordField =\n        Field.text\n            |> Field.password\n            |> Field.required \"Required\"\n            |> Field.withClientValidation\n                (\\password ->\n                    ( Just password\n                    , if String.length password < 4 then\n                        [ \"Must be at least 4 characters\" ]\n\n                      else\n                        []\n                    )\n                )\n\n    fieldView :\n        Form.Context String data\n        -> String\n        -> Validation.Field String parsed FieldView.Input\n        -> Html msg\n    fieldView formState label field =\n        Html.div []\n            [ Html.label []\n                [ Html.text (label ++ \" \")\n                , field |> Form.FieldView.input []\n                ]\n            , (if formState.submitAttempted then\n                formState.errors\n                    |> Form.errorsForField field\n                    |> List.map\n                        (\\error ->\n                            Html.li [] [ Html.text error ]\n                        )\n\n               else\n                []\n              )\n                |> Html.ul [ Attr.style \"color\" \"red\" ]\n            ]\n\n\n### Step 2 - Render the Form's View\n\n    view maybeUrl sharedModel app =\n        { title = \"Sign Up\"\n        , body =\n            [ form\n                |> Form.renderHtml \"login\" [] Nothing app ()\n            ]\n        }\n\n\n### Step 3 - Handle Server-Side Form Submissions\n\n    action : RouteParams -> Request.Parser (BackendTask (Response ActionData ErrorPage))\n    action routeParams =\n        Request.formData [ signupForm ]\n            |> Request.map\n                (\\signupResult ->\n                    case signupResult of\n                        Ok newUser ->\n                            newUser\n                                |> myCreateUserBackendTask\n                                |> BackendTask.map\n                                    (\\() ->\n                                        -- redirect to the home page\n                                        -- after successful sign-up\n                                        Route.redirectTo Route.Index\n                                    )\n\n                        Err _ ->\n                            Route.redirectTo Route.Login\n                                |> BackendTask.succeed\n                )\n\n    myCreateUserBackendTask : BackendTask ()\n    myCreateUserBackendTask =\n        BackendTask.fail\n            \"TODO - make a database call to create a new user\"\n\n\n## Building a Form Parser\n\n@docs Form, HtmlForm, StyledHtmlForm, DoneForm\n\n@docs Response\n\n@docs init\n\n\n## Adding Fields\n\n@docs field, hiddenField, hiddenKind\n\n\n## View Functions\n\n@docs Context\n\n\n## Rendering Forms\n\n@docs renderHtml, renderStyledHtml\n\n@docs withGetMethod, toDynamicFetcher\n\n\n## Showing Errors\n\n@docs Errors, errorsForField\n\n\n## Running Parsers\n\n@docs parse, runServerSide, runOneOfServerSide\n\n\n## Combining Forms to Run on Server\n\n@docs ServerForms\n\n@docs initCombined, combine\n\n-- TODO @docs initCombinedServer, combineServer, toServerForm\n\n\n## Dynamic Fields\n\n@docs dynamic\n\n@docs AppContext\n\n\n## Submission\n\n@docs withOnSubmit\n\n","unions":[{"name":"Errors","comment":" ","args":["error"],"cases":[]},{"name":"Form","comment":" ","args":["error","combineAndView","parsed","input","userMsg"],"cases":[]},{"name":"ServerForms","comment":" ","args":["error","parsed"],"cases":[["ServerForms",["List.List (Form.Form error (Form.Validation.Combined error parsed) Basics.Never Basics.Never Basics.Never)"]]]}],"aliases":[{"name":"AppContext","comment":" ","args":["app","actionData"],"type":"{ app | path : List.List String.String, action : Maybe.Maybe actionData, transition : Maybe.Maybe Pages.Transition.Transition, fetchers : Dict.Dict String.String (Pages.Transition.FetcherState (Maybe.Maybe actionData)), pageFormState : Dict.Dict String.String { fields : Dict.Dict String.String { value : String.String, status : Form.FieldStatus.FieldStatus }, submitAttempted : Basics.Bool } }"},{"name":"Context","comment":" ","args":["error","data"],"type":"{ errors : Form.Errors error, isTransitioning : Basics.Bool, submitAttempted : Basics.Bool, data : data }"},{"name":"DoneForm","comment":" ","args":["error","parsed","data","view","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error data -> view } parsed data msg"},{"name":"HtmlForm","comment":" ","args":["error","parsed","input","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error input -> List.List (Html.Html (Form.Msg.Msg msg)) } parsed input msg"},{"name":"Response","comment":" ","args":["error"],"type":"Pages.Internal.Form.Response error"},{"name":"StyledHtmlForm","comment":" ","args":["error","parsed","data","msg"],"type":"Form.Form error { combine : Form.Validation.Combined error parsed, view : Form.Context error data -> List.List (Html.Styled.Html (Form.Msg.Msg msg)) } parsed data msg"}],"values":[{"name":"combine","comment":" ","type":"(parsed -> combined) -> Form.Form error { combineAndView | combine : Form.Validation.Validation error parsed kind constraints } parsed input msg -> Form.ServerForms error combined -> Form.ServerForms error combined"},{"name":"dynamic","comment":" ","type":"(decider -> Form.Form error { combine : Form.Validation.Validation error parsed named constraints1, view : subView } parsed data msg) -> Form.Form error ({ combine : decider -> Form.Validation.Validation error parsed named constraints1, view : decider -> subView } -> combineAndView) parsed data msg -> Form.Form error combineAndView parsed data msg"},{"name":"errorsForField","comment":" ","type":"Form.Validation.Field error parsed kind -> Form.Errors error -> List.List error"},{"name":"field","comment":" Declare a visible field for the form.\n\nUse [`Form.Field`](Form-Field) to define the field and its validations.\n\n    form =\n        Form.init\n            (\\email ->\n                { combine =\n                    Validation.succeed NewUser\n                        |> Validation.andMap email\n                , view = \\info -> [{- render fields -}]\n                }\n            )\n            |> Form.field \"email\"\n                (Field.text |> Field.required \"Required\")\n\n","type":"String.String -> Form.Field.Field error parsed data kind constraints -> Form.Form error (Form.Validation.Field error parsed kind -> combineAndView) parsedCombined data msg -> Form.Form error combineAndView parsedCombined data msg"},{"name":"hiddenField","comment":" Declare a hidden field for the form.\n\nUnlike [`field`](#field) declarations which are rendered using [`Form.FieldView`](Form-FieldView)\nfunctions, `hiddenField` inputs are automatically inserted into the form when you render it.\n\nYou define the field's validations the same way as for `field`, with the\n[`Form.Field`](Form-Field) API.\n\n    form =\n        Form.init\n            (\\quantity productId ->\n                { combine = {- combine fields -}\n                , view = \\info -> [{- render visible fields -}]\n                }\n            )\n            |> Form.field \"quantity\"\n                (Field.int |> Field.required \"Required\")\n            |> Form.field \"productId\"\n                (Field.text\n                    |> Field.required \"Required\"\n                    |> Field.withInitialValue (\\product -> Form.Value.string product.id)\n                )\n\n","type":"String.String -> Form.Field.Field error parsed data kind constraints -> Form.Form error (Form.Validation.Field error parsed Form.FieldView.Hidden -> combineAndView) parsed data msg -> Form.Form error combineAndView parsed data msg"},{"name":"hiddenKind","comment":" ","type":"( String.String, String.String ) -> error -> Form.Form error combineAndView parsed data msg -> Form.Form error combineAndView parsed data msg"},{"name":"init","comment":" ","type":"combineAndView -> Form.Form String.String combineAndView parsed input msg"},{"name":"initCombined","comment":" ","type":"(parsed -> combined) -> Form.Form error { combineAndView | combine : Form.Validation.Validation error parsed kind constraints } parsed input msg -> Form.ServerForms error combined"},{"name":"parse","comment":" ","type":"String.String -> Form.AppContext app actionData -> data -> Form.Form error { info | combine : Form.Validation.Validation error parsed named constraints } parsed data msg -> ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) )"},{"name":"renderHtml","comment":" ","type":"String.String -> List.List (Html.Attribute (Form.Msg.Msg msg)) -> (actionData -> Maybe.Maybe (Form.Response error)) -> Form.AppContext app actionData -> input -> Form.Form error { combine : Form.Validation.Validation error parsed named constraints, view : Form.Context error input -> List.List (Html.Html (Form.Msg.Msg msg)) } parsed input msg -> Html.Html (Form.Msg.Msg msg)"},{"name":"renderStyledHtml","comment":" ","type":"String.String -> List.List (Html.Styled.Attribute (Form.Msg.Msg msg)) -> (actionData -> Maybe.Maybe (Form.Response error)) -> Form.AppContext app actionData -> input -> Form.Form error { combine : Form.Validation.Validation error parsed field constraints, view : Form.Context error input -> List.List (Html.Styled.Html (Form.Msg.Msg msg)) } parsed input msg -> Html.Styled.Html (Form.Msg.Msg msg)"},{"name":"runOneOfServerSide","comment":" ","type":"List.List ( String.String, String.String ) -> Form.ServerForms error parsed -> ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) )"},{"name":"runServerSide","comment":" ","type":"List.List ( String.String, String.String ) -> Form.Form error (Form.Validation.Validation error parsed kind constraints) Basics.Never data msg -> ( Basics.Bool, ( Maybe.Maybe parsed, Dict.Dict String.String (List.List error) ) )"},{"name":"toDynamicFetcher","comment":" ","type":"Form.Form error { combine : Form.Validation.Validation error parsed field constraints, view : Form.Context error data -> view } parsed data userMsg -> Form.Form error { combine : Form.Validation.Validation error parsed field constraints, view : Form.Context error data -> view } parsed data userMsg"},{"name":"withGetMethod","comment":" ","type":"Form.Form error combineAndView parsed input userMsg -> Form.Form error combineAndView parsed input userMsg"},{"name":"withOnSubmit","comment":" ","type":"({ fields : List.List ( String.String, String.String ), parsed : Result.Result () parsed } -> userMsg) -> Form.Form error combineAndView parsed input oldMsg -> Form.Form error combineAndView parsed input userMsg"}],"binops":[]},{"name":"Form.Field","comment":"\n\n\n## Base Fields\n\n@docs text, checkbox, int, float\n\n\n## Multiple Choice Fields\n\n@docs select, range, OutsideRange\n\n\n## Date/Time Fields\n\n@docs date, time, TimeOfDay\n\n\n## Other\n\n@docs Field, FieldInfo, exactValue\n\n\n## Field Configuration\n\n@docs required, withClientValidation, withInitialValue, withOptionalInitialValue, map\n\n\n## Text Field Display Options\n\n@docs email, password, search, telephone, url, textarea\n\n\n## Numeric Field Options\n\n@docs withMax, withMin, withStep, withMinLength, withMaxLength\n\n\n## Phantom Options\n\n@docs No, Yes\n\n","unions":[{"name":"Field","comment":" ","args":["error","parsed","data","kind","constraints"],"cases":[["Field",["Form.Field.FieldInfo error parsed data","kind"]]]},{"name":"No","comment":" ","args":[],"cases":[]},{"name":"OutsideRange","comment":" ","args":[],"cases":[["AboveRange",[]],["BelowRange",[]]]},{"name":"Yes","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"FieldInfo","comment":" ","args":["error","parsed","data"],"type":"{ initialValue : Maybe.Maybe (data -> Maybe.Maybe String.String), decode : Maybe.Maybe String.String -> ( Maybe.Maybe parsed, List.List error ), properties : List.List ( String.String, Json.Encode.Value ) }"},{"name":"TimeOfDay","comment":" ","args":[],"type":"{ hours : Basics.Int, minutes : Basics.Int }"}],"values":[{"name":"checkbox","comment":" ","type":"Form.Field.Field error Basics.Bool data Form.FieldView.Input { required : (), initial : Basics.Bool }"},{"name":"date","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Date.Date) data Form.FieldView.Input { min : Date.Date, max : Date.Date, required : (), wasMapped : Form.Field.No, initial : Date.Date }"},{"name":"email","comment":" ","type":"Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"exactValue","comment":" ","type":"String.String -> error -> Form.Field.Field error String.String data Form.FieldView.Input { required : (), plainText : (), wasMapped : Form.Field.No, initial : String.String }"},{"name":"float","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Basics.Float) data Form.FieldView.Input { min : Basics.Float, max : Basics.Float, required : (), wasMapped : Form.Field.No, initial : Basics.Float }"},{"name":"int","comment":" ","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Basics.Int) data Form.FieldView.Input { min : Basics.Int, max : Basics.Int, required : (), wasMapped : Form.Field.No, step : Basics.Int, initial : Basics.Int }"},{"name":"map","comment":" ","type":"(parsed -> mapped) -> Form.Field.Field error parsed data kind constraints -> Form.Field.Field error mapped data kind { constraints | wasMapped : Form.Field.Yes }"},{"name":"password","comment":" ","type":"Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"range","comment":" ","type":"{ min : Form.Value.Value valueType, max : Form.Value.Value valueType, initial : data -> Form.Value.Value valueType, missing : error, invalid : Form.Field.OutsideRange -> error } -> Form.Field.Field error (Maybe.Maybe valueType) data kind { constraints | required : (), initial : valueType, min : valueType, max : valueType, wasMapped : Form.Field.No } -> Form.Field.Field error valueType data Form.FieldView.Input { constraints | wasMapped : Form.Field.No }"},{"name":"required","comment":" ","type":"error -> Form.Field.Field error (Maybe.Maybe parsed) data kind { constraints | required : (), wasMapped : Form.Field.No } -> Form.Field.Field error parsed data kind { constraints | wasMapped : Form.Field.No }"},{"name":"search","comment":" ","type":"Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"select","comment":" ","type":"List.List ( String.String, option ) -> (String.String -> error) -> Form.Field.Field error (Maybe.Maybe option) data (Form.FieldView.Options option) { required : (), wasMapped : Form.Field.No }"},{"name":"telephone","comment":" ","type":"Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"text","comment":" ","type":"Form.Field.Field error (Maybe.Maybe String.String) data Form.FieldView.Input { required : (), plainText : (), wasMapped : Form.Field.No, initial : String.String, minlength : (), maxlength : () }"},{"name":"textarea","comment":" ","type":"{ rows : Maybe.Maybe Basics.Int, cols : Maybe.Maybe Basics.Int } -> Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"time","comment":" <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time>\n","type":"{ invalid : String.String -> error } -> Form.Field.Field error (Maybe.Maybe Form.Field.TimeOfDay) data Form.FieldView.Input { required : (), wasMapped : Form.Field.No }"},{"name":"url","comment":" ","type":"Form.Field.Field error parsed data Form.FieldView.Input { constraints | plainText : () } -> Form.Field.Field error parsed data Form.FieldView.Input constraints"},{"name":"withClientValidation","comment":" ","type":"(parsed -> ( Maybe.Maybe mapped, List.List error )) -> Form.Field.Field error parsed data kind constraints -> Form.Field.Field error mapped data kind { constraints | wasMapped : Form.Field.Yes }"},{"name":"withInitialValue","comment":" ","type":"(data -> Form.Value.Value valueType) -> Form.Field.Field error value data kind { constraints | initial : valueType } -> Form.Field.Field error value data kind constraints"},{"name":"withMax","comment":" ","type":"Form.Value.Value valueType -> error -> Form.Field.Field error parsed data kind { constraints | max : valueType } -> Form.Field.Field error parsed data kind constraints"},{"name":"withMaxLength","comment":" ","type":"Basics.Int -> error -> Form.Field.Field error parsed data kind { constraints | maxlength : () } -> Form.Field.Field error parsed data kind constraints"},{"name":"withMin","comment":" ","type":"Form.Value.Value valueType -> error -> Form.Field.Field error parsed data kind { constraints | min : valueType } -> Form.Field.Field error parsed data kind constraints"},{"name":"withMinLength","comment":" ","type":"Basics.Int -> error -> Form.Field.Field error parsed data kind { constraints | minlength : () } -> Form.Field.Field error parsed data kind constraints"},{"name":"withOptionalInitialValue","comment":" ","type":"(data -> Maybe.Maybe (Form.Value.Value valueType)) -> Form.Field.Field error value data kind { constraints | initial : valueType } -> Form.Field.Field error value data kind constraints"},{"name":"withStep","comment":" ","type":"Form.Value.Value valueType -> Form.Field.Field msg error value view { constraints | step : valueType } -> Form.Field.Field msg error value view constraints"}],"binops":[]},{"name":"Form.FieldStatus","comment":" elm-pages manages the client-side state of fields, including Status which you can use to determine when\nin the user's workflow to show validation errors.\n\n\n## Field Status\n\n@docs FieldStatus, fieldStatusToString\n\n","unions":[{"name":"FieldStatus","comment":" ","args":[],"cases":[["NotVisited",[]],["Focused",[]],["Changed",[]],["Blurred",[]]]}],"aliases":[],"values":[{"name":"fieldStatusToString","comment":" ","type":"Form.FieldStatus.FieldStatus -> String.String"}],"binops":[]},{"name":"Form.FieldView","comment":"\n\n@docs Input, InputType, Options, input, inputTypeToString, radio, toHtmlProperties, Hidden, select, valueButton\n\n\n## Html.Styled Helpers\n\n@docs radioStyled, inputStyled, valueButtonStyled\n\n","unions":[{"name":"Hidden","comment":" There are no render helpers for hidden fields because the `Form.renderHtml` helper functions automatically render hidden fields for you.\n","args":[],"cases":[["Hidden",[]]]},{"name":"Input","comment":" ","args":[],"cases":[["Input",["Form.FieldView.InputType"]]]},{"name":"InputType","comment":" ","args":[],"cases":[["Text",[]],["Number",[]],["Range",[]],["Radio",[]],["Date",[]],["Time",[]],["Checkbox",[]],["Tel",[]],["Search",[]],["Password",[]],["Email",[]],["Url",[]],["Textarea",["{ rows : Maybe.Maybe Basics.Int, cols : Maybe.Maybe Basics.Int }"]]]},{"name":"Options","comment":" ","args":["a"],"cases":[["Options",["String.String -> Maybe.Maybe a","List.List String.String"]]]}],"aliases":[],"values":[{"name":"input","comment":" ","type":"List.List (Html.Attribute msg) -> Form.Validation.Field error parsed Form.FieldView.Input -> Html.Html msg"},{"name":"inputStyled","comment":" ","type":"List.List (Html.Styled.Attribute msg) -> Form.Validation.Field error parsed Form.FieldView.Input -> Html.Styled.Html msg"},{"name":"inputTypeToString","comment":" ","type":"Form.FieldView.InputType -> String.String"},{"name":"radio","comment":" ","type":"List.List (Html.Attribute msg) -> (parsed -> (List.List (Html.Attribute msg) -> Html.Html msg) -> Html.Html msg) -> Form.Validation.Field error parsed2 (Form.FieldView.Options parsed) -> Html.Html msg"},{"name":"radioStyled","comment":" ","type":"List.List (Html.Styled.Attribute msg) -> (parsed -> (List.List (Html.Styled.Attribute msg) -> Html.Styled.Html msg) -> Html.Styled.Html msg) -> Form.Validation.Field error parsed2 (Form.FieldView.Options parsed) -> Html.Styled.Html msg"},{"name":"select","comment":" ","type":"List.List (Html.Attribute msg) -> (parsed -> ( List.List (Html.Attribute msg), String.String )) -> Form.Validation.Field error parsed2 (Form.FieldView.Options parsed) -> Html.Html msg"},{"name":"toHtmlProperties","comment":" ","type":"List.List ( String.String, Json.Encode.Value ) -> List.List (Html.Attribute msg)"},{"name":"valueButton","comment":" Gives you a submit button that will submit the form with a specific value for the given Field.\n","type":"String.String -> List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Form.Validation.Field error parsed kind -> Html.Html msg"},{"name":"valueButtonStyled","comment":" Gives you a submit button that will submit the form with a specific value for the given Field.\n","type":"String.String -> List.List (Html.Styled.Attribute msg) -> List.List (Html.Styled.Html msg) -> Form.Validation.Field error parsed kind -> Html.Styled.Html msg"}],"binops":[]},{"name":"Form.FormData","comment":"\n\n@docs FormData, Method\n\n","unions":[{"name":"Method","comment":" ","args":[],"cases":[["Get",[]],["Post",[]]]}],"aliases":[{"name":"FormData","comment":" ","args":[],"type":"{ fields : List.List ( String.String, String.String ), method : Form.FormData.Method, action : String.String, id : Maybe.Maybe String.String }"}],"values":[],"binops":[]},{"name":"Form.Msg","comment":"\n\n@docs Msg, FormData, Method, onSubmitDecoder\n\n","unions":[{"name":"Method","comment":" ","args":[],"cases":[["Get",[]],["Post",[]]]},{"name":"Msg","comment":" ","args":["msg"],"cases":[["Submit",["Form.Msg.FormData"]],["FormFieldEvent",["Pages.FormState.FieldEvent"]],["UserMsg",["msg"]]]}],"aliases":[{"name":"FormData","comment":" ","args":[],"type":"{ fields : List.List ( String.String, String.String ), method : Form.Msg.Method, action : String.String, id : Maybe.Maybe String.String }"}],"values":[{"name":"onSubmitDecoder","comment":" ","type":"Json.Decode.Decoder (Form.Msg.Msg msg)"}],"binops":[]}]